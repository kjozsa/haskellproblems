{- euler 1 
foldl (+) 0 [x | x <- [0..999], x `mod` 3 == 0 || x `mod` 5 == 0]
-}
{- euler 2 
fibo :: (Ord a) => a -> a -> [a]
fibo a b = [a] ++ fibo b (a+b) 
sum $ takeWhile (< 4000000) $ filter even $ fibo 1 1
-}

{- euler 3 -}
primes :: (Integral a) => a -> a -> [a]
primes num d 
  | num `mod` d == 0 = [d] ++ (primes rest d) 
  | d > num-1        = []
  | otherwise          = primes num (d+1)
  where rest = num `div` d

--res = last $ primes 600851475143 2

{- euler 4 -}
-- maximum $ filter (\x -> show x == reverse(show(x))) [x*y | x <- [1..999], y <- [1..999]]

{- euler 48 -}
lots :: [Char]
lots = reverse $ take 10 $ reverse $ show $ sum $ map (\x -> x^x) [1..1000]

{- euler 5 -}
good :: Int -> Bool
good num = foldl1 (&&) $ map (\x -> num `mod` x == 0) [1..20]
res5 = take 1 [x | x <- [13*17, 2*13*17 ..], good x]

{- euler 7 -}
prime :: Int -> Bool
prime num = foldl1 (&&) $ map (\x -> mod num x /= 0) [2..(round $ sqrt $ fromIntegral num)]
prime' num = all (\x -> mod num x /= 0) $ takeWhile (\n -> n^2 <= num) (2:[3,5..])
--let prime num = all (\x -> mod num x /= 0) $ takeWhile (\n -> n^2 <= num) (2:[3,5..]) in takeWhile (<1000) $ filter prime [2..]
res7 = last $ take 10001 $ filter prime' (2:[3,5..])

import Data.Char
num = 7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450

digits = map digitToInt $ show num

five :: Integral a => [a] -> a
five (x:y:z:p:q:xs) = max (x*y*z*p*q) (five (y:z:p:q:xs))
five (x) = 1

res8 = digits z

